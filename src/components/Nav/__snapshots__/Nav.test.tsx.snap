// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Nav snapshot should match 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Nav
    items={
      Array [
        "item1",
        "item2",
      ]
    }
    onClick={
      [MockFunction] {
        "calls": Array [
          Array [
            "item1",
          ],
        ],
        "results": Array [
          Object {
            "isThrow": false,
            "value": undefined,
          },
        ],
      }
    }
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": <ul>
        <NavItem
          item="item1"
          onClick={
            [MockFunction] {
              "calls": Array [
                Array [
                  "item1",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
        />
        <NavItem
          item="item2"
          onClick={
            [MockFunction] {
              "calls": Array [
                Array [
                  "item1",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            }
          }
        />
      </ul>,
    },
    "ref": null,
    "rendered": Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <NavItem
            item="item1"
            onClick={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "item1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />,
          <NavItem
            item="item2"
            onClick={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "item1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "item1",
          "nodeType": "class",
          "props": Object {
            "item": "item1",
            "onClick": [MockFunction] {
              "calls": Array [
                Array [
                  "item1",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "item2",
          "nodeType": "class",
          "props": Object {
            "item": "item2",
            "onClick": [MockFunction] {
              "calls": Array [
                Array [
                  "item1",
                ],
              ],
              "results": Array [
                Object {
                  "isThrow": false,
                  "value": undefined,
                },
              ],
            },
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
      ],
      "type": "ul",
    },
    "type": "nav",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": <ul>
          <NavItem
            item="item1"
            onClick={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "item1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />
          <NavItem
            item="item2"
            onClick={
              [MockFunction] {
                "calls": Array [
                  Array [
                    "item1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              }
            }
          />
        </ul>,
      },
      "ref": null,
      "rendered": Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": Array [
            <NavItem
              item="item1"
              onClick={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "item1",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />,
            <NavItem
              item="item2"
              onClick={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "item1",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "isThrow": false,
                      "value": undefined,
                    },
                  ],
                }
              }
            />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "item1",
            "nodeType": "class",
            "props": Object {
              "item": "item1",
              "onClick": [MockFunction] {
                "calls": Array [
                  Array [
                    "item1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "item2",
            "nodeType": "class",
            "props": Object {
              "item": "item2",
              "onClick": [MockFunction] {
                "calls": Array [
                  Array [
                    "item1",
                  ],
                ],
                "results": Array [
                  Object {
                    "isThrow": false,
                    "value": undefined,
                  },
                ],
              },
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
        ],
        "type": "ul",
      },
      "type": "nav",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromError": true,
          "getDerivedStateFromProps": Object {
            "hasShouldComponentUpdateBug": false,
          },
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
